name: CI

on:
  pull_request:
    branches:
      - main
      - master
  push:
    branches:
      - main
      - master

jobs:
  backend-lint:
    name: Backend Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run linter
        uses: golangci/golangci-lint-action@v8
        with:
          version: v2.5.0

  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Run tests
        run: make test

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-coverage
          path: coverage.out
          retention-days: 30

  frontend-check:
    name: Frontend Lint & Type Check
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - name: Install swag
        run: go install github.com/swaggo/swag/cmd/swag@latest

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Generate OpenAPI docs
        run: cd .. && make docs

      - name: Generate API client
        working-directory: ./frontend
        run: npm run generate:api

      - name: Run lint, format check, and type check
        run: npm run check

  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - name: Install swag
        run: go install github.com/swaggo/swag/cmd/swag@latest

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Generate OpenAPI docs
        run: cd .. && make docs

      - name: Generate API client
        working-directory: ./frontend
        run: npm run generate:api

      - name: Run tests
        run: npm run test -- --run

  # Summary job that depends on all checks
  # This makes it easy to set up a branch protection rule
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs:
      - backend-lint
      - backend-test
      - frontend-check
      - frontend-test
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          if [[ "${{ needs.backend-lint.result }}" != "success" ]] || \
             [[ "${{ needs.backend-test.result }}" != "success" ]] || \
             [[ "${{ needs.frontend-check.result }}" != "success" ]] || \
             [[ "${{ needs.frontend-test.result }}" != "success" ]]; then
            echo "One or more CI jobs failed"
            exit 1
          fi
          echo "All CI jobs passed successfully!"
